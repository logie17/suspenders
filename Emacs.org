#+title: Logan's emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./.emacs.d/init.el :mkdirp yes

* Background

I was originally inspired to organize my dot files after watching the series: [[https://www.youtube.com/watch?v=74zOY-vgkyw&list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ&index=1][Emacs From Scatch]]. Some of the dot file implementation is based on that, but with my own preferences.

* Environment
#+begin_src emacs-lisp

  (add-to-list 'exec-path "/usr/local/bin/")
  (setenv "PATH" (concat (getenv "PATH") ":/home/logan/.nvm/versions/node/v14.16.1/bin"))
  (setq exec-path (append exec-path '("/home/logan/.nvm/versions/node/v14.16.1/bin")))

  (server-start)

#+end_src
* Package

For package management I will be using package (builtin) and [[https://github.com/jwiegley/use-package][use-package]].
#+begin_src emacs-lisp

(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)

(setq use-package-always-ensure t)
#+end_src

* Basic UI Configuration
Doing some basic setup

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)
  ;; Disable scroll bar
  (scroll-bar-mode -1)

  ;; Disable toolbar
  (tool-bar-mode -1)

  ;; Disable tooltips
  (tooltip-mode -1)

  ;; Give the fringe some breathing room
  (set-fringe-mode 10)

  ;; Disable menu bar
  (menu-bar-mode -1)

  ;; Flash bell
  (setq visible-bell t)

  ;; Ctrl-g / ESC do the same thing now
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (global-display-line-numbers-mode t)

  (column-number-mode)

  ;; disable line numbers in certain modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

* Themes/Font

Opting to use [[https://github.com/doomemacs/themes][Doom Themes]] and [[https://github.com/seagle0128/doom-modeline][Doom Modeline]]. Other packages are include: [[https://github.com/domtronn/all-the-icons.el][all-the-icons]].


#+begin_src emacs-lisp
  (use-package all-the-icons)

  (use-package doom-themes
    :init (load-theme 'doom-dracula t))

  ;; todo
  (use-package doom-modeline
    :ensure t
    :custom ((doom-modeline height 35))
    :init (doom-modeline-mode 1))

    ;; Currently not used
  (defvar logan/default-font-size 180)
  (defvar logan/default-variable-font-size 180)
  (set-face-attribute 'default nil :font "Jet Brains Mono" :height 130)
  (set-face-attribute 'fixed-pitch nil :font "Jet Brains Mono" :height 130)
  (set-face-attribute 'variable-pitch nil :font "FreeSerif" :height 130 :weight 'regular)


  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** TODO Fonts are currently not installed and working

* Which Key


#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))

#+end_src

* Ivy/Counsel
#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  ;; get ivy rich stuff into useful counsel commands
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))

#+end_src

* Smart-Tab with Hippie Expand



#+begin_src emacs-lisp
  (setq completion-ignore-case t)
  (setq read-file-name-completion-ignore-case t)
  (use-package smart-tab
    :config
    (global-smart-tab-mode 1)
    (setq hippie-expand-try-functions-list (list
                                            'try-expand-dabbrev-visible
                                            'try-expand-dabbrev
                                            'try-expand-dabbrev-all-buffers
                                            'try-expand-dabbrev-from-kill
                                            'try-complete-file-name-partially
                                            'try-complete-file-name
                                            ))

    (setq smart-tab-using-hippie-expand t)
    (setq smart-tab-disabled-major-modes '(term-mode inf-ruby-mode org-mode eshell-mode)))

#+end_src

* Helpful

#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

* Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/work/frameable")
      (setq projectile-project-search-path '("~/work/frameable")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))
#+end_src

* Development
** Utility helpers
#+begin_src emacs-lisp
  (defvar logan-cracklib-dict nil)
  (defun logan/read-cracklib-dict ()
    "Reads the cracklib small db"
    (when (null logan-cracklib-dict)
      (with-temp-buffer
          (insert-file-contents "/usr/share/dict/cracklib-small")
          (setq logan-cracklib-dict (split-string (buffer-string) "\n" t)))))

  (defun logan/random-string ()
    (interactive)
    (logan/read-cracklib-dict)
    (insert (nth (random (length logan-cracklib-dict)) logan-cracklib-dict )))

  (defun logan/open-emacs-org-file()
    (interactive)
    (find-file "~/work/personal/.dotfiles/Emacs.org"))


  (defun logan/open-bash-org-file()
    (interactive)
    (find-file "~/work/personal/.dotfiles/Bash.org"))


  (defun set-mark-and-goto-line (line)
    "Set mark and prompt for a line to go to."
    (interactive "NLine: ")
    (push-mark nil t nil)
    (goto-line line))



#+end_src

** Racket mode
#+begin_src emacs-lisp
  (use-package racket-mode
    :hook (racket-mode . racket-xp-mode)
    :ensure t)
#+end_src

** lsp mode
#+begin_src emacs-lisp
  (defun logan/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . logan/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))
#+end_src

** lsp ui

#+begin_src emacs-lisp
  (use-package lsp-ui
     :hook (lsp-mode . lsp-ui-mode)
     :custom
     (lsp-ui-doc-position 'bottom))

  (use-package lsp-treemacs
    :after lsp)
  (use-package lsp-ivy)

  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package js2-mode
    :ensure t
    :config
    (setq js2-bounce-indent-flag nil
          js2-cleanup-whitespace t
          js2-indent-on-enter-key t)

    :init
    (setq js2-mirror-mode nil)
    (setq js2-mode-indent-ignore-first-tab t)
    (setq js2-strict-inconsistent-return-warning nil)
    (setq js2-strict-missing-semi-warning nil)
    (setq js2-basic-offset 2)
    (setq js-switch-indent-offset 2)

    ;;js settings (for json)
    (setq js-indent-level 2)

    (setq js-basic-indent 2)
    (setq-default js2-basic-indent 2
                  js2-basic-offset 2
                  js2-auto-indent-p t
                  js2-cleanup-whitespace t
                  js2-enter-indents-newline t
                  js2-indent-on-enter-key t
                  js2-global-externs (list "window" "module" "require" "buster" "sinon" "assert" "refute" "setTimeout" "clearTimeout" "setInterval" "clearInterval" "location" "__dirname" "console" "JSON" "jQuery" "$"))

    (add-hook 'js2-mode-hook
              (lambda ()
                (push '("function" . ?ƒ) prettify-symbols-alist)))

    (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode)))

  (use-package web-mode
    :ensure t
    :init
    (setq web-mode-engines-alist
          '(("ctemplate"    . "\\.html\\'")
            ("ctemplate"    . "\\.vue\\'")
            ("ctemplate"    . "\\.html.erb\\'")))
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-enable-auto-indentation nil)
    (setq web-mode-script-padding 0)
    (setq web-mode-style-padding 2))

  (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.hbs\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode))

#+end_src

* Keybindings

** key map

Sets up /s-s/  as a leader key. Right now the following are supported.

- tt: theme picker (doom)
- ts: text scaling
- rs: random string
- ue: open Emacs org configuratoin
- ub: open Bash org configuration

 #+begin_src emacs-lisp
   (define-prefix-command 'logan-map)

   (global-set-key (kbd "M-g") 'set-mark-and-goto-line)
   (global-set-key (kbd "s-s") 'logan-map)

   (define-key logan-map (kbd "t t") 'counsel-load-theme)
   (define-key logan-map (kbd "t s") 'hydra-text-scale/body)

   (define-key logan-map (kbd "r s") 'logan/random-string)

   (define-key logan-map (kbd "u e") 'logan/open-emacs-org-file)
   (define-key logan-map (kbd "u b") 'logan/open-bash-org-file)


   (use-package hydra)

   ;; a way to zoom in and out
   (defhydra hydra-text-scale (:timeout 4)
     "scale text"
     ("j" text-scale-increase "in")
     ("k" text-scale-decrease "out")
     ("d" (text-scale-adjust 0) "default")
     ("f" nil "finished" :exit t))

  #+end_src

** Evil Mode

I originally tried evil mode but it turned out to put too much load on my aging brain. Commenting it out and leaving it here as a monument to good intentions. 
#+begin_src emacs-lisp

  ;; (use-package evil
  ;;   :init
  ;;   (setq evil-want-integration t)
  ;;   (setq evil-want-keybinding nil)
  ;;   (setq evil-want-C-u-scroll t)
  ;;   (setq evil-want-C-i-jump nil)
  ;;   :config
  ;;   (evil-mode 1)
  ;;   (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  ;;   (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;;   ;; Use visual line motions even outside of visual-line-mode buffers
  ;;   (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  ;;   (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  ;;   (evil-set-initial-state 'messages-buffer-mode 'normal)
  ;;   (evil-set-initial-state 'dashboard-mode 'normal))

  ;; (general-define-key
  ;;  "C-M-j" 'counsel-switch-buffer)
  ;; ;;
  ;; (use-package evil-collection
  ;;   :after evil
  ;;   :config
  ;;   (evil-collection-init))
#+end_src

* Git (Magit/Forge)

#+begin_src emacs-lisp
  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; read up on more
  (use-package forge)

#+end_src


* Org Mode
#+begin_src emacs-lisp
(defun logan/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1) ;; This can affect tables/sql etc
  (visual-line-mode 1)
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    ;; (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))
    (set-face-attribute (car face) nil :weight 'regular :height (cdr face)))
  (dolist (face '(org-table org-code org-block org-date))
    (set-face-attribute face nil :inherit 'fixed-pitch))
  (setq evil-auto-ident nil))

;; org notifier look into
(use-package org
  :hook (org-mode . logan/org-mode-setup)
  :config
  (setq org-ellipsis " ▾"
        org-hide-emphasis-markers t)
  (setq org-agenda-start-with-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
;;  (setq org-agenda-files
;;	'("~/work/personal/emacs/org-files/Tasks.org"
;;	  "~/work/personal/emacs/org-files/Birthdays.org"))
  (logan/org-mode-setup))

(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

;; this will disable line numbers
(defun logan/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . logan/org-mode-visual-fill))

#+end_src

* Tempo

#+begin_src emacs-lisp

  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src


#+begin_src emacs-lisp
  (defun logan/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/work/personal/.dotfiles/Emacs.org"))

      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'logan/org-babel-tangle-config)))
#+end_src

* Babel
#+begin_src emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (perl . t )
     (gnuplot .t )
     (python . t )))

  (setq org-confirm-babel-evaluate nil)
#+end_src
