#!/usr/bin/env perl

use strict;
use warnings;

# ec <arg> - open <arg> in a new buffer in an existing emacs session,
#            or start a new emacs session and open <arg>
#
# It handles grep -Hn output: 'ec foo.pl:1234' opens foo.pl to line 1234.
# It handles perl warnings: 'ec foo.pl line 1234' opens foo.pl to line 1234.
# It handles github urls: 'ec https://github.com/systemsthinkinginstitute/songbird/blob/master/app.js#L10'
#    (it's not fully git aware though, eg it doesn't switch you between branches)
#
# Note, this works best if you have
#    (server-start)
# in your ~/.emacs

use Getopt::Long;
my $elisp;
GetOptions(
  'elisp=s' => \$elisp,
  'setenv=s' => sub {
    my $arg = pop();
    my ($env, $value) = $arg =~ /=/
      ? (split /=/, $arg)
      : ($arg, $ENV{$arg});
    $value = length($value) ? $value : '';
    $elisp = qq{(setenv "$env" "$value")},
  },
  'join' => \(my $join_existing_session),
);

# find an `emacsclient` to use
my ($emacsclient) = grep { -e $_ } qw(
  /Applications/Emacs.app/Contents/MacOS/bin/emacsclient
  /usr/local/bin/emacsclient
  /usr/bin/emacsclient
  /snap/bin/emacsclient
);

if (!$emacsclient) {
  print "No emacsclient was found\n";
  exit 1;
}

# figure out what file (and optionally, line) we're working on
my ($arg, @extra) = @ARGV;
$arg ||= '';
my ($file, $line_number, $char) = $arg =~ m{https?://github}
  ? do { $arg =~ m{blob/[^/]+/(\S+)#L(\d+)}; ($1, $2) }
  : $arg =~ m{https?://}
    ? do {
        chomp(my $file = `mktemp`);
        my ($url, $line, $char) = $arg =~ m{(https?://.*?):(\d+)(?::(\d+))?};
        system("curl -s '$url' > $file");
        ($file, $line, $char);
      }
    : (split /:/, $arg);

# try really hard to find a line number
my $extra = join ' ', @extra;
if (!$line_number && $extra =~ m/line (\d+)/) {
  $line_number = $1;
}

# build up arguments for emacsclient
my ($cmd, $foreground);
if ($elisp) {
  $cmd = qq{$emacsclient -e '$elisp'};
} elsif ($line_number && $line_number =~ /^\d+/) {
  $cmd = qq{$emacsclient -e '(find-file "$file")' -e '(goto-line $line_number)'};
  if ($char) {
    $char--;
    $cmd .= qq{ -e '(right-char $char)'};
  }
  $cmd .= qq{ -e '(recenter-top-bottom)' -e '(hl-line-mode)'};
} elsif ($arg && -f $arg) {
  $cmd = "$emacsclient --no-wait $arg";
} elsif ($join_existing_session) {
  $cmd = "$emacsclient -nw";
  $foreground = 1;
} else {
  $cmd = "$emacsclient --no-wait $file";
}

# run the darn thing
$cmd .= '> /dev/null 2>&1 &' if ! $foreground;
$ENV{TERM} = $ENV{TERM} // '' =~ /screen/ ? 'xterm-256color' : $ENV{TERM};

print "$cmd\n";
exec $cmd;
